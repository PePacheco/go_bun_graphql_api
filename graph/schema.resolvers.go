package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"github.com/google/uuid"
	"graphql_book_management/graph/model"
)

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, title string, author string, publicationYear int, genre string) (*model.Book, error) {
	book := &model.Book{
		ID:              uuid.New().String(),
		Title:           title,
		Author:          author,
		PublicationYear: publicationYear,
		Genre:           genre,
	}

	_, err := r.DB.NewInsert().Model(book).Exec(ctx)

	if err != nil {
		return nil, err
	}

	return book, nil
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, id string, title *string, author *string, publicationYear *int, genre *string) (*model.Book, error) {
	book := &model.Book{
		ID: id,
	}

	err := r.DB.NewSelect().Model(book).Where("id = ?", id).Scan(ctx)

	if err != nil {
		return nil, err
	}

	if title != nil {
		book.Title = *title
	}

	if author != nil {
		book.Author = *author
	}

	if publicationYear != nil {
		book.PublicationYear = *publicationYear
	}

	if genre != nil {
		book.Genre = *genre
	}

	_, err = r.DB.NewUpdate().Model(book).Where("id = ?", id).Exec(ctx)

	if err != nil {
		return nil, err
	}

	return book, nil
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id string) (string, error) {
	_, err := r.DB.NewDelete().Model(&model.Book{}).Where("id = ?", id).Exec(ctx)

	if err != nil {
		return "", err
	}

	return id, nil
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*model.Book, error) {
	var book model.Book
	err := r.DB.NewSelect().Model(&book).Where("id = ?", id).Scan(ctx)

	if err != nil {
		return nil, err
	}

	return &book, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	var books []*model.Book
	err := r.DB.NewSelect().Model(&books).Scan(ctx)

	if err != nil {
		return nil, err
	}

	return books, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
